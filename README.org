#+title: RICE - Rice Is Complex Enchantment
#+author: Peromage

#+begin_quote
> Keep ricing
#+end_quote

* About
This is my personal configuration collection built on top of NixOS with Nix Flake.

* Some thoughts when writing the configurations (as a reminder for myself)
** Top level directories
The top level (root of Rice) is categorized based on the outputs of the root flake.

** NixOS modules
The [[./modules][modules]] are implemented in a way where they can be easily (sort of) reused.

The [[./modules/hosts][hosts]] directory contains basic, hardware abstracted configurations for a computer.  Each host profile should be put into a subdirectory and provide basic system level settings.

The [[./modules/instances][instances]] directory is the place to store top level configurations for a specific hardware.  Each profile has the hardware specific setup like mounting, booting, encryption etc..  Each profile should be put into a subdirectory and can be imported as a part of =nixosConfigurations= in the flake.

[[./modules/homes][homes]] directory stores user space configurations.  Each profile should be put into a directory and can be imported as a part of =homeConfigurations= in the flake.

The rest of the modules are reusable modules which can be used anywhere.  Some of them also provide options to set.

** Special arguments
All special arguments from this repo are encapsulated in the =rice= variable within the top level flake.  Except the top level =default.nix= for each subdirectories from the repo root, which are passed with =rice='s content, all the submodules (NixOS modules, packages, devshells etc.) are passed with that single =rice= variable if needed.  Doing so to reduce the mind burden while writing modules.

The [[./lib][lib]] itself should have zero knowledge about the content of =rice=, except passing =rice= via wrapper functions.  This is to ensure its generic nature.

** Dotfiles
I didn't rewrite all my dotfiles into Nix modules since I also need to work on platforms other than NixOS.  Although I do have some apps configured in the Nix way, most of them are still linked to their directories via Home Manager.

A convenient [[./dotfiles/stow.sh][script]] is provided in case I need to quickly deploy some configurations on non-Nix systems.

* Appendix
** Fcitx5 with Rime
Customization should go into =name.custom.yaml= in order to avoid overwrite from redeployment.  For example, =~/.config/share/fcitx5/rime/default.yaml=, the corresponding customization file is =~/.config/share/fcitx5/rime/default.custom.yaml=.

To redeploy (rebuild), run
#+begin_src sh
fcitx5 -r
#+end_src

NOTE: In Gnome, ~super+space~ is eatten by mutter.  Need to find a workaround to enable it by users or simply use a different key binding like ~Ctrl+|~ (a mnemonic key corresponding to Emacs's ~Ctrl+\~).

** Common CLI alternatives
- Better =ls=: [[https://github.com/ogham/exa][exa]]
- Better =cat=: [[https://github.com/sharkdp/bat][bat]]
- Better =grep=: [[https://github.com/BurntSushi/ripgrep][ripgrep]]
- Better =find=: [[https://github.com/junegunn/fzf][fzf]]
- Quick jump: [[https://github.com/ajeetdsouza/zoxide][zoxide]], [[https://github.com/skywind3000/z.lua][z.lua]]
- File manager: [[https://github.com/gokcehan/lf][lf]], [[https://midnight-commander.org][mc]]
- Automation: [[https://github.com/eradman/entr][entr]]
